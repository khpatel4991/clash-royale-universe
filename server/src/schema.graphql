type Mutation {
  battleLog(playerTag: String!): [Battle!]
  clanTag(tag: String!): Clan
  playerTag(tag: String!): Player
}

interface BattlePlayer {
  id: ID!
  crowns: Int!
  kingTowerHitPoints: Int
  princessTowersHitPoints: [Int]!
  startingTrophies: Int
  trophyChange: Int
}

interface IDeckCard {
  level: Int!
}

type Arena {
  id: ID!
  name: String!
  battles: [Battle!]!
  players: [Player!]!
}

type Battle {
  id: ID!
  arena: Arena!
  battleTime: DateTime!
  gameMode: GameMode!
  isLadderTournament: Boolean!
  opponent: [Opponent!]!
  team: [Team!]!
  type: String!
}

type Card {
  id: ID!
  name: String!
  maxLevel: Int!
  iconurl: String!
}

type Clan {
  tag: ID!
  badgeId: Int!
  clanChestLevel: Int!
  clanChestMaxLevel: Int!
  clanChestPoints: Int
  clanChestStatus: String!
  clanScore: Int!
  clanWarTrophies: Int
  description: String!
  donationsPerWeek: Int!
  location: Location!
  name: String!
  members: Int!
  memberList: [ClanMember!]
  type: String!
}

type ClanMember @relation(name: "MEMBER_OF") {
  from: Clan!
  to: Player!
  clanChestPoints: Int!
  clanRank: Int!
  donations: Int!
  donationsReceived: Int!
  expLevel: Int!
  previousClanRank: Int!
  role: String!
}

type GameMode {
  id: ID!
  name: String!
}

type Location {
  id: ID!
  name: String!
  isCountry: Boolean!
  countryCode: String!
  clans: [Clan!]
}

type Opponent implements BattlePlayer @relation(name: "OPPONENT") {
  id: ID!
  from: Battle!
  to: Player!
  crowns: Int!
  kingTowerHitPoints: Int
  princessTowersHitPoints: [Int]!
  startingTrophies: Int
  trophyChange: Int
}

type Player {
  tag: ID!
  # arena: Arena! @relation(name: "LADDER_ARENA", direction: "IN")
  asTeam: [Team!]
  asOpponent: [Opponent!]
  battleCount: Int!
  bestTrophies: Int!
  cards: [PlayerCard!]
  challengeCardsWon: Int!
  challengeMaxWins: Int!
  clan: ClanMember
  clanCardsCollected: Int!
  currentDeck: [CurrentDeckCard!]
  currentFavouriteCard: Card @relation(name: "FAVOURITE_CARD", direction: IN)
  expLevel: Int!
  losses: Int!
  name: String!
  starPoints: Int!
  threeCrownWins: Int!
  totalDonations: Int!
  tournamentBattleCount: Int!
  tournamentCardsWon: Int!
  trophies: Int!
  warDayWins: Int!
  wins: Int!
}

type PlayerCard implements IDeckCard @relation(name: "PLAYER_CARD") {
  from: Card!
  to: Player!
  level: Int!
}

type CurrentDeckCard implements IDeckCard @relation(name: "CURRENT_DECK") {
  from: Card!
  to: Player!
  level: Int!
}

type Team implements BattlePlayer @relation(name: "TEAM") {
  id: ID!
  from: Battle!
  to: Player!
  crowns: Int!
  kingTowerHitPoints: Int
  princessTowersHitPoints: [Int]!
  startingTrophies: Int
  trophyChange: Int
}
